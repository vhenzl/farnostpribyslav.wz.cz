import { createDateFromDbDatetime, formatDate, formatPublished } from '@/lib/date-utils';
import { toAbsoluteUrl } from '@/lib/site';
import { getPublisherById } from '@/lib/users';
import { fotoPath, getAllZpravy, getZpravaBySlug, type Zprava } from '@/lib/zpravy';
import type { Metadata } from 'next';
import { notFound } from 'next/navigation';
import type { JSX } from 'react';

export async function generateStaticParams() {
  const rows = await getAllZpravy();
  return rows.map(z => ({ slug: `${z.rok}-${z.idr}` }));
}

type PageProps = { params: Promise<{ slug: string }> };

export async function generateMetadata({ params }: PageProps): Promise<Metadata> {
  const { slug } = await params;

  const { item } = await getZpravaBySlug(slug);
  if (!item) throw new Error(`Zprava with slug ${slug} not found`);

  const { title, description, url, publishedTime } = createMetadata(item);

  return {
    title: `${title} | Zprávy ${item.rok}`,
    description,
    alternates: { canonical: url },
    openGraph: {
      type: 'article',
      url,
      title,
      description,
      publishedTime,
    },
  } satisfies Metadata;
}

function createMetadata(item: Zprava) {
  const url = toAbsoluteUrl(`/zpravy/${item.rok}-${item.idr}`);
  const title = item.nazev;
  const published = createDateFromDbDatetime(item.datum_iso);
  const description = `Archiv webového článku farnosti Přibyslav ze dne ${formatDate(published)}.`;
  const publishedTime = published.toISOString();
  return { title, description, url, publishedTime };
}

function createJsonLd(zprava: Zprava) {
  const metadata = createMetadata(zprava);
  const jsonLd = {
    '@context': 'https://schema.org',
    '@type': 'Article',
    'headline': metadata.title,
    'description': metadata.description,
    'author': zprava.autor,
    'url': metadata.url,
    'datePublished': metadata.publishedTime,
  } as const;
  return jsonLd;
}

export default async function ZpravaDetail({ params }: PageProps): Promise<JSX.Element> {
  const { slug } = await params;
  let data: Awaited<ReturnType<typeof getZpravaBySlug>>;
  try {
    data = await getZpravaBySlug(slug);
  } catch {
    return notFound();
  }
  const z = data.item;
  const captions = z.fotky ?? [];
  const pub = await getPublisherById(z.vlozil);
  if (!pub) throw new Error(`Publisher ${z.vlozil} not found`);

  const prev = data.prev;
  const next = data.next;
  const publishedDate = createDateFromDbDatetime(z.datum_iso);

  return (
    <article className="prose">
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(createJsonLd(z)) }}
      />
      <p className="breadcrumbs">
        <a href="/zpravy">Zprávy</a>
        <span> / </span>
        <a href={`/zpravy#rok-${z.rok}`}>{z.rok}</a>
      </p>
      <h1>{z.nazev}</h1>
      <p className="byline"><em>{z.autor}</em></p>
      <div dangerouslySetInnerHTML={{ __html: z.text.replace(/<!--\s*Generated by XStandard[\s\S]*?-->/, '') }} />
      {Array.from({ length: z.foto_pocet }).map((_, x) => {
        const i1 = x + 1;
        const src = fotoPath(z.rok, z.foto_nazev, i1);
        const caption = captions[x];
        const alt = caption ?? `${z.nazev} – fotografie ${i1}`;
        return (
          <figure key={i1}>
            <img src={src} alt={alt} />
            {caption ? <figcaption>{caption}</figcaption> : null}
          </figure>
        );
      })}
      <hr />
      <section className="article-meta">
        <p>
          Publikoval
          {' '}
          <span>{pub.name}</span>
          {' '}
          <time dateTime={publishedDate.toISOString()}>{formatPublished(publishedDate)}</time>
        </p>
        <nav className="article-nav">
          <span>
            {prev && (
              <a href={`/zpravy/${prev.rok}-${prev.idr}`}>
                <span>&larr; </span>
                <span>{prev.nazev}</span>
              </a>
            )}
          </span>
          <span>
            {next && (
              <a href={`/zpravy/${next.rok}-${next.idr}`}>
                <span>{next.nazev}</span>
                <span> &rarr;</span>
              </a>
            )}
          </span>
        </nav>
      </section>
    </article>
  );
}
